<?php
 goto jKWJM; RKC1j: $xml = simplexml_load_string(file_get_contents($endpoint_filename)); goto rdXc3; duSQa: class SendSmsRequest extends RpcAcsRequest { public function __construct() { parent::__construct("\104\171\163\x6d\163\141\160\x69", "\x32\60\61\x37\x2d\60\x35\55\x32\65", "\123\x65\x6e\x64\x53\x6d\x73"); $this->setMethod("\x50\117\123\x54"); } private $templateCode; private $phoneNumbers; private $signName; private $resourceOwnerAccount; private $templateParam; private $resourceOwnerId; private $ownerId; private $outId; private $smsUpExtendCode; public function getTemplateCode() { return $this->templateCode; } public function setTemplateCode($templateCode) { $this->templateCode = $templateCode; $this->queryParameters["\124\x65\155\160\x6c\141\164\x65\103\x6f\144\x65"] = $templateCode; } public function getPhoneNumbers() { return $this->phoneNumbers; } public function setPhoneNumbers($phoneNumbers) { $this->phoneNumbers = $phoneNumbers; $this->queryParameters["\x50\x68\x6f\x6e\x65\x4e\165\x6d\142\x65\x72\x73"] = $phoneNumbers; } public function getSignName() { return $this->signName; } public function setSignName($signName) { $this->signName = $signName; $this->queryParameters["\x53\x69\x67\x6e\x4e\x61\155\145"] = $signName; } public function getResourceOwnerAccount() { return $this->resourceOwnerAccount; } public function setResourceOwnerAccount($resourceOwnerAccount) { $this->resourceOwnerAccount = $resourceOwnerAccount; $this->queryParameters["\122\145\x73\x6f\165\162\x63\x65\117\x77\x6e\145\162\101\x63\143\x6f\165\156\x74"] = $resourceOwnerAccount; } public function getTemplateParam() { return $this->templateParam; } public function setTemplateParam($templateParam) { $this->templateParam = $templateParam; $this->queryParameters["\124\145\155\160\x6c\x61\x74\x65\120\141\x72\141\x6d"] = $templateParam; } public function getResourceOwnerId() { return $this->resourceOwnerId; } public function setResourceOwnerId($resourceOwnerId) { $this->resourceOwnerId = $resourceOwnerId; $this->queryParameters["\122\145\163\157\x75\x72\143\x65\117\167\x6e\145\162\x49\144"] = $resourceOwnerId; } public function getOwnerId() { return $this->ownerId; } public function setOwnerId($ownerId) { $this->ownerId = $ownerId; $this->queryParameters["\117\x77\x6e\x65\x72\111\144"] = $ownerId; } public function getOutId() { return $this->outId; } public function setOutId($outId) { $this->outId = $outId; $this->queryParameters["\117\x75\x74\x49\x64"] = $outId; } public function getSmsUpExtendCode() { return $this->smsUpExtendCode; } public function setSmsUpExtendCode($smsUpExtendCode) { $this->smsUpExtendCode = $smsUpExtendCode; $this->queryParameters["\123\x6d\163\125\160\x45\x78\x74\145\x6e\x64\103\x6f\x64\145"] = $smsUpExtendCode; } } goto nq_iQ; v0si4: ini_set("\144\x69\163\160\x6c\x61\171\x5f\145\162\162\x6f\x72\x73", "\x31"); goto wg75b; wg75b: define("\105\116\101\102\x4c\105\137\110\124\124\x50\137\120\122\x4f\130\x59", FALSE); goto m9Tgv; rdXc3: $json = json_encode($xml); goto N2vS5; ygJ7l: abstract class AcsRequest { protected $version; protected $product; protected $actionName; protected $regionId; protected $acceptFormat; protected $method; protected $protocolType = "\x68\164\x74\160"; protected $content; protected $queryParameters = array(); protected $headers = array(); function __construct($product, $version, $actionName) { goto lNYor; lNYor: $this->headers["\170\x2d\163\144\153\x2d\143\x6c\x69\145\156\x74"] = "\x70\x68\x70\57\x32\x2e\60\x2e\60"; goto IBxqb; oDKNF: $this->version = $version; goto diBah; diBah: $this->actionName = $actionName; goto Qkm3R; IBxqb: $this->product = $product; goto oDKNF; Qkm3R: } public abstract function composeUrl($iSigner, $credential, $domain); public function getVersion() { return $this->version; } public function setVersion($version) { $this->version = $version; } public function getProduct() { return $this->product; } public function setProduct($product) { $this->product = $product; } public function getActionName() { return $this->actionName; } public function setActionName($actionName) { $this->actionName = $actionName; } public function getAcceptFormat() { return $this->acceptFormat; } public function setAcceptFormat($acceptFormat) { $this->acceptFormat = $acceptFormat; } public function getQueryParameters() { return $this->queryParameters; } public function getHeaders() { return $this->headers; } public function getMethod() { return $this->method; } public function setMethod($method) { $this->method = $method; } public function getProtocol() { return $this->protocolType; } public function setProtocol($protocol) { $this->protocolType = $protocol; } public function getRegionId() { return $this->regionId; } public function setRegionId($region) { $this->regionId = $region; } public function getContent() { return $this->content; } public function setContent($content) { $this->content = $content; } public function addHeader($headerKey, $headerValue) { $this->headers[$headerKey] = $headerValue; } } goto dZbK0; Lv05y: ED8N_: goto Lnaou; qkOmn: set_time_limit(0); goto Wn1vC; nq_iQ: class xcap_SmsDemo { static $acsClient = null; public static function getAcsClient($AccessKeyId, $AccessKeySecret) { goto XcdTm; DhM61: static::$acsClient = new DefaultAcsClient($profile); goto YhWXd; RwwaV: return static::$acsClient; goto xWYVe; oDBTA: $profile = DefaultProfile::getProfile($region, $accessKeyId, $accessKeySecret); goto Kv6Uo; trvgM: $domain = "\144\x79\163\x6d\163\141\160\151\56\141\154\151\x79\x75\156\x63\x73\x2e\x63\157\155"; goto qrJZx; Kv6Uo: DefaultProfile::addEndpoint($endPointName, $region, $product, $domain); goto DhM61; qrJZx: $accessKeyId = $AccessKeyId; goto qdAuZ; YhWXd: nan3B: goto RwwaV; yO8j0: if (!(static::$acsClient == null)) { goto nan3B; } goto oDBTA; ENSGk: $region = "\x63\156\x2d\x68\141\x6e\147\x7a\x68\x6f\x75"; goto oGoDL; oGoDL: $endPointName = "\143\156\x2d\150\141\x6e\147\x7a\x68\x6f\x75"; goto yO8j0; qdAuZ: $accessKeySecret = $AccessKeySecret; goto ENSGk; XcdTm: $product = "\104\x79\163\155\x73\141\160\151"; goto trvgM; xWYVe: } public static function sendSms($AccessKeyId, $AccessKeySecret, $signName, $templateCode, $phoneNumbers, $templateParam = null, $outId = null, $smsUpExtendCode = null) { goto PQJMN; kN4I_: $request->setSmsUpExtendCode($smsUpExtendCode); goto uDt9l; PQJMN: $request = new SendSmsRequest(); goto B6Ohy; B6Ohy: $request->setPhoneNumbers($phoneNumbers); goto nAUIY; AcFmk: $acsResponse = static::getAcsClient($AccessKeyId, $AccessKeySecret)->getAcsResponse($request); goto Zepq7; FLcW3: $request->setOutId($outId); goto NDRzq; gbCp0: if (!$smsUpExtendCode) { goto jQhff; } goto kN4I_; C2yxt: $request->setTemplateCode($templateCode); goto rG7Yq; uDt9l: jQhff: goto AcFmk; rG7Yq: if (!$templateParam) { goto AttvR; } goto tgab2; JrBVc: if (!$outId) { goto td850; } goto FLcW3; ubUNg: AttvR: goto JrBVc; tgab2: $request->setTemplateParam(json_encode($templateParam)); goto ubUNg; nAUIY: $request->setSignName($signName); goto C2yxt; NDRzq: td850: goto gbCp0; Zepq7: return $acsResponse; goto IDmlb; IDmlb: } public function queryDetails($phoneNumbers, $sendDate, $pageSize = 10, $currentPage = 1, $bizId = null) { goto Bbumh; xprKi: $request->setBizId($bizId); goto obXyt; Bbumh: $request = new QuerySendDetailsRequest(); goto oakbB; we5kj: $request->setCurrentPage($currentPage); goto sRVMy; obXyt: $request->setSendDate($sendDate); goto NiiXw; sRVMy: $acsResponse = static::getAcsClient()->getAcsResponse($request); goto woIFi; oakbB: $request->setPhoneNumber($phoneNumbers); goto xprKi; NiiXw: $request->setPageSize($pageSize); goto we5kj; woIFi: return $acsResponse; goto cN93H; cN93H: } } goto qkOmn; KBTQ3: class ShaHmac1Signer implements ISigner { public function signString($source, $accessSecret) { return base64_encode(hash_hmac("\x73\x68\141\x31", $source, $accessSecret, true)); } public function getSignatureMethod() { return "\110\115\101\103\55\123\110\101\61"; } public function getSignatureVersion() { return "\x31\x2e\60"; } } goto rcwLp; Z7Cja: class ProductDomain { private $productName; private $domainName; function __construct($product, $domain) { $this->productName = $product; $this->domainName = $domain; } public function getProductName() { return $this->productName; } public function setProductName($productName) { $this->productName = $productName; } public function getDomainName() { return $this->domainName; } public function setDomainName($domainName) { $this->domainName = $domainName; } } goto nOpw8; nOpw8: class EndpointProvider { private static $endpoints; public static function findProductDomain($regionId, $product) { goto xPeul; ZlstJ: NGdSL: goto q84jj; xPeul: if (!(null == $regionId || null == $product || null == self::$endpoints)) { goto r7OkY; } goto BAEDJ; c5pyC: foreach (self::$endpoints as $key => $endpoint) { goto O20jE; e5PYW: return self::findProductDomainByProduct($endpoint->getProductDomains(), $product); goto LrcQi; LrcQi: oxoIf: goto zcC7O; zcC7O: oXKQt: goto IcMjn; O20jE: if (!in_array($regionId, $endpoint->getRegionIds())) { goto oxoIf; } goto e5PYW; IcMjn: } goto ZlstJ; q84jj: return null; goto yPzHF; LKvRx: r7OkY: goto c5pyC; BAEDJ: return null; goto LKvRx; yPzHF: } private static function findProductDomainByProduct($productDomains, $product) { goto YzcoI; aEGSd: return null; goto BLHnM; BLHnM: Hg1g1: goto QXlHi; QXlHi: foreach ($productDomains as $key => $productDomain) { goto ezn2h; ezn2h: if (!($product == $productDomain->getProductName())) { goto vcb5z; } goto QHoow; xL4Bp: vcb5z: goto cEt8V; QHoow: return $productDomain->getDomainName(); goto xL4Bp; cEt8V: gLBpL: goto USni9; USni9: } goto z0qGa; YzcoI: if (!(null == $productDomains)) { goto Hg1g1; } goto aEGSd; z0qGa: UXvIY: goto yMCHY; yMCHY: return null; goto MfCg4; MfCg4: } public static function getEndpoints() { return self::$endpoints; } public static function setEndpoints($endpoints) { self::$endpoints = $endpoints; } } goto Hg1D1; N2vS5: $json_array = json_decode($json, TRUE); goto BVOWL; EiOg5: class xcHttpResponse { private $body; private $status; public function getBody() { return $this->body; } public function setBody($body) { $this->body = $body; } public function getStatus() { return $this->status; } public function setStatus($status) { $this->status = $status; } public function isSuccess() { goto JhLA1; JhLA1: if (!(200 <= $this->status && 300 > $this->status)) { goto q39qz; } goto fk14A; fk14A: return true; goto OrMnA; OrMnA: q39qz: goto MJUbc; MJUbc: return false; goto RvRdO; RvRdO: } } goto Ed_1j; Qmkbt: interface IClientProfile { public function getSigner(); public function getRegionId(); public function getFormat(); public function getCredential(); } goto QrPoo; Mjp2u: class LibcurlWrapper { private $curlMultiHandle; private $curlHandleInfo; private $idleCurlHandle; public function __construct() { $this->curlMultiHandle = curl_multi_init(); $this->idleCurlHandle = array(); } public function __destruct() { goto Z2RRV; QunKd: foreach ($this->idleCurlHandle as $handle) { curl_close($handle); JPoZx: } goto HMqGv; zsfB0: $this->idleCurlHandle = array(); goto K44W8; HMqGv: f0YS2: goto zsfB0; Z2RRV: curl_multi_close($this->curlMultiHandle); goto QunKd; K44W8: } public function startSendingRequest($httpRequest, $done) { goto q0gCB; sMhUM: if (!($curlHandle === false)) { goto YrnQa; } goto AyJE4; FjZ4L: array_push($headers, "\x55\x73\145\x72\55\101\147\x65\156\x74\x3a" . Conf::getUserAgent()); goto RqZrd; Qc0bM: $curlHandle = array_pop($this->idleCurlHandle); goto sLAD3; LWCja: curl_setopt($curlHandle, CURLOPT_TIMEOUT_MS, $httpRequest->timeoutMs); goto qC7id; b_a21: array_push($headers, "\103\157\x6e\164\145\156\164\55\x54\171\160\x65\72\40\155\x75\154\x74\x69\x70\141\x72\164\x2f\x66\x6f\162\155\x2d\x64\141\164\141\73\x20\x62\157\x75\x6e\x64\x61\162\171\x3d" . $arr[0]); goto Ftsi7; RqZrd: if (!($httpRequest->method === "\120\x4f\123\124")) { goto BHYha; } goto etptm; Db3mh: curl_setopt($curlHandle, CURLOPT_SAFE_UPLOAD, true); goto xzc2W; Cjw5E: curl_setopt($curlHandle, CURLOPT_HEADER, 1); goto Qa177; a01B6: BHYha: goto MfENR; AyJE4: return false; goto PfG1L; Ftsi7: curl_setopt($curlHandle, CURLOPT_POSTFIELDS, $arr[1]); goto a01B6; Qa177: curl_setopt($curlHandle, CURLOPT_RETURNTRANSFER, 1); goto zKqH3; xzc2W: uE8eg: goto oHzrh; qC7id: curl_setopt($curlHandle, CURLOPT_URL, $httpRequest->url); goto Cjw5E; zKqH3: $headers = $httpRequest->customHeaders; goto FjZ4L; UWOxp: $this->curlHandleInfo[$curlHandle]["\x72\x65\x71\165\145\163\x74"] = $httpRequest; goto Qut4U; F3CMg: curl_multi_add_handle($this->curlMultiHandle, $curlHandle); goto p9CIL; oHzrh: curl_setopt($curlHandle, CURLOPT_POST, true); goto I0tnd; MYd3A: goto K5mNJ; goto iKzdw; PfG1L: YrnQa: goto MYd3A; MfENR: curl_setopt($curlHandle, CURLOPT_HTTPHEADER, $headers); goto F3CMg; vlH3e: $curlHandle = curl_init(); goto sMhUM; p9CIL: $this->curlHandleInfo[$curlHandle]["\x64\x6f\156\145"] = $done; goto UWOxp; sLAD3: K5mNJ: goto LWCja; etptm: if (!defined("\x43\125\122\114\117\120\x54\137\x53\x41\106\x45\137\x55\120\x4c\x4f\101\104")) { goto uE8eg; } goto Db3mh; xv_yM: array_push($headers, "\x45\170\160\x65\143\x74\72\x20\61\60\x30\x2d\143\157\156\164\x69\x6e\x75\x65"); goto b_a21; iKzdw: JeiiB: goto Qc0bM; I0tnd: $arr = buildCustomPostFields($httpRequest->dataToPost); goto xv_yM; q0gCB: if (count($this->idleCurlHandle) !== 0) { goto JeiiB; } goto vlH3e; Qut4U: } public function performSendingRequest() { goto uXUJl; WBswW: $info = curl_multi_info_read($this->curlMultiHandle); goto rlDFs; Qm1Sn: lliyN: goto fIMA1; BDX56: VlGoV: goto ME1aD; uXUJl: VycWP: goto yhkho; Il3g5: uNUUt: goto cqEnL; SwZyl: RuShH: goto MGScE; U1qxf: goto NGFFR; goto Qm1Sn; MGScE: if ($mrc == CURLM_CALL_MULTI_PERFORM) { goto VlGoV; } goto PP7ze; ypkaR: Sof5m: goto M6AMT; CooDE: if (!($active && $mrc == CURLM_OK)) { goto uNUUt; } goto JXwTQ; odAj1: NGFFR: goto ZLo1E; cqEnL: if (!(count($this->curlHandleInfo) == 0)) { goto lliyN; } goto U1qxf; rlDFs: if (!($info !== false)) { goto RuShH; } goto uboMY; loHwu: if (!($info !== false)) { goto XxnYV; } goto e25ar; D_HRE: goto VycWP; goto odAj1; PP7ze: qk56a: goto t3Yd3; e25ar: $this->processResult($info); goto FDS25; t3Yd3: goto W8SF7; goto Il3g5; yhkho: $active = null; goto XQtvm; D4oVX: if ($mrc == CURLM_CALL_MULTI_PERFORM) { goto kqMpZ; } goto ypkaR; uboMY: $this->processResult($info); goto SwZyl; fIMA1: LDEBb: goto D_HRE; m0yTY: $mrc = curl_multi_exec($this->curlMultiHandle, $active); goto l7pdR; ME1aD: $mrc = curl_multi_exec($this->curlMultiHandle, $active); goto WBswW; XQtvm: kqMpZ: goto m0yTY; JXwTQ: if (!(curl_multi_select($this->curlMultiHandle) == -1)) { goto BF_Vk; } goto YgBXL; YgBXL: usleep(1); goto nhcwI; FDS25: XxnYV: goto D4oVX; M6AMT: W8SF7: goto CooDE; l7pdR: $info = curl_multi_info_read($this->curlMultiHandle); goto loHwu; nhcwI: BF_Vk: goto BDX56; ZLo1E: } private function processResult($info) { goto ik1yu; mwfeN: $done = $this->curlHandleInfo[$handle]["\x64\157\156\x65"]; goto Lt8EV; PCDf1: $headerStr = substr($responseStr, 0, $headerSize); goto OeAN4; S_FBm: $response->curlErrorMessage = curl_error($handle); goto lzP3Q; SCTWu: $response->body = $body; goto KALPj; zNyvQ: unset($this->curlHandleInfo[$handle]); goto vOesm; oUDSU: d_zSp: goto SCTWu; MWC4O: goto rTzjf; goto Xj20n; dJw1r: $responseStr = curl_multi_getcontent($handle); goto pkIdZ; BM2Ek: $response->curlErrorMessage = curl_error($handle); goto sS8xO; lzP3Q: call_user_func($done, $request, $response); goto omUz9; ZL_o6: $request = $this->curlHandleInfo[$handle]["\162\x65\161\x75\145\x73\x74"]; goto mwfeN; OeAN4: $body = substr($responseStr, $headerSize); goto LHQnL; XPzA_: $headLines = explode("\xd\12", $headerStr); goto tsB6k; vOesm: curl_multi_remove_handle($this->curlMultiHandle, $handle); goto HsECz; KYtO2: if ($result !== CURLE_OK) { goto yBTjw; } goto dJw1r; sS8xO: $response->statusCode = curl_getinfo($handle, CURLINFO_HTTP_CODE); goto XPzA_; tsB6k: foreach ($headLines as $head) { goto MgR81; Y2RZp: if (!(count($arr) >= 2)) { goto NV2x4; } goto Fpo_T; MgR81: $arr = explode("\x3a", $head); goto Y2RZp; Fpo_T: $response->headers[trim($arr[0])] = trim($arr[1]); goto oF78U; oF78U: NV2x4: goto xwcko; xwcko: HsOHx: goto uPoUU; uPoUU: } goto oUDSU; Xj20n: yBTjw: goto ujPfh; pyTEn: $handle = $info["\x68\141\x6e\144\x6c\x65"]; goto ZL_o6; HsECz: array_push($this->idleCurlHandle, $handle); goto KQrwT; LHQnL: $response->curlErrorCode = curl_errno($handle); goto BM2Ek; omUz9: rTzjf: goto zNyvQ; ik1yu: $result = $info["\162\145\x73\165\x6c\164"]; goto pyTEn; ujPfh: $response->curlErrorCode = $result; goto S_FBm; KALPj: call_user_func($done, $request, $response); goto MWC4O; pkIdZ: $headerSize = curl_getinfo($handle, CURLINFO_HEADER_SIZE); goto PCDf1; Lt8EV: $response = new HttpResponse(); goto KYtO2; KQrwT: } private function resetCurl($handle) { goto mdJac; M3pK4: curl_reset($handle); goto dJG3d; dJG3d: z731P: goto WVHX5; mk9m9: curl_setopt($handler, CURLOPT_POSTFIELDS, array()); goto oyC_W; dvV5l: goto z731P; goto v6CZN; mdJac: if (function_exists("\143\x75\x72\x6c\137\162\145\x73\145\164")) { goto bwWg_; } goto vll9u; oyC_W: curl_setopt($handler, CURLOPT_TIMEOUT, 0); goto QD1Na; v6CZN: bwWg_: goto M3pK4; FuRKC: curl_setopt($handler, CURLOPT_HTTPHEADER, array()); goto mk9m9; vll9u: curl_setopt($handler, CURLOPT_URL, ''); goto FuRKC; QD1Na: curl_setopt($handler, CURLOPT_SSL_VERIFYPEER, false); goto BQ22A; BQ22A: curl_setopt($handler, CURLOPT_SSL_VERIFYHOST, 0); goto dvV5l; WVHX5: } } goto EiOg5; BVOWL: $endpoints = array(); goto ZSnCi; gdq0x: define("\x48\124\x54\120\137\120\x52\117\130\x59\x5f\120\x4f\122\124", "\70\70\70\x38"); goto uGIpq; Rsimr: class HttpResponse { public $curlErrorCode; public $curlErrorMessage; public $statusCode; public $headers; public $body; } goto Mjp2u; dZbK0: abstract class RpcAcsRequest extends AcsRequest { private $dateTimeFormat = "\x59\55\155\x2d\x64\x5c\124\110\x3a\x69\x3a\163\134\x5a"; private $domainParameters = array(); function __construct($product, $version, $actionName) { parent::__construct($product, $version, $actionName); $this->initialize(); } private function initialize() { $this->setMethod("\x47\105\x54"); $this->setAcceptFormat("\x4a\x53\117\x4e"); } private function prepareValue($value) { goto awJJ3; g9Dl0: goto bpQ19; goto qUcHj; sp4bT: if ($value) { goto fxzCc; } goto EigPZ; v5Lnt: return $value; goto g9Dl0; Ox7cQ: goto Syki9; goto oScgv; EigPZ: return "\146\x61\x6c\163\x65"; goto Ox7cQ; qUcHj: Li_IV: goto sp4bT; awJJ3: if (is_bool($value)) { goto Li_IV; } goto v5Lnt; JmPSf: bpQ19: goto fWrpG; QoNDj: Syki9: goto JmPSf; oScgv: fxzCc: goto uAVGl; uAVGl: return "\x74\162\165\145"; goto QoNDj; fWrpG: } public function composeUrl($iSigner, $credential, $domain) { goto OtZvk; wIbSG: $requestUrl = $this->getProtocol() . "\72\x2f\x2f" . $domain . "\57\x3f"; goto U5yh8; Skda1: foreach ($apiParams as $apiParamKey => $apiParamValue) { $this->putDomainParameters($apiParamKey, $apiParamValue); HFWoL: } goto x1700; g7MpZ: $apiParams["\x52\x65\147\x69\157\156\111\144"] = $this->getRegionId(); goto gZwAJ; oMIt5: if (parent::getMethod() == "\120\x4f\x53\124") { goto EpaFL; } goto wIbSG; Tfq9K: $apiParams["\106\157\x72\155\x61\164"] = $this->getAcceptFormat(); goto JasJA; JasJA: $apiParams["\123\151\147\x6e\x61\164\165\162\x65\x4d\x65\x74\x68\x6f\144"] = $iSigner->getSignatureMethod(); goto VSN6Y; x1700: nXuRI: goto henXG; MEJBD: $apiParams["\x54\151\x6d\x65\x73\164\x61\155\160"] = date($this->dateTimeFormat); goto vYgLP; F9djf: return substr($requestUrl, 0, -1); goto RzDJS; wfbBW: date_default_timezone_set("\107\115\124"); goto MEJBD; SMFmf: fw_gA: goto g7MpZ; B_m49: $apiParams["\126\145\x72\163\x69\157\156"] = $this->getVersion(); goto MQ1fz; XSnxB: Fbz9z: goto ueoRl; MQ1fz: $apiParams["\x53\151\x67\156\141\x74\165\x72\x65"] = $this->computeSignature($apiParams, $credential->getAccessSecret(), $iSigner); goto oMIt5; U5yh8: foreach ($apiParams as $apiParamKey => $apiParamValue) { $requestUrl .= "{$apiParamKey}\x3d" . urlencode($apiParamValue) . "\46"; tim98: } goto tHoCl; gZwAJ: $apiParams["\x41\x63\x63\x65\163\x73\x4b\145\171\111\x64"] = $credential->getAccessKeyId(); goto Tfq9K; tHoCl: sMWvV: goto F9djf; vYgLP: $apiParams["\x41\x63\x74\x69\x6f\x6e"] = $this->getActionName(); goto B_m49; henXG: return $requestUrl; goto XSnxB; RzDJS: goto Fbz9z; goto lySq6; yxeJF: $requestUrl = $this->getProtocol() . "\x3a\x2f\57" . $domain . "\57"; goto Skda1; OtZvk: $apiParams = parent::getQueryParameters(); goto iU3j0; dE94M: $apiParams["\123\x69\x67\156\x61\164\165\162\145\x4e\x6f\156\x63\x65"] = uniqid(mt_rand(0, 0xffff), true); goto wfbBW; VSN6Y: $apiParams["\x53\x69\147\x6e\141\x74\x75\x72\x65\x56\145\x72\163\x69\157\156"] = $iSigner->getSignatureVersion(); goto dE94M; iU3j0: foreach ($apiParams as $key => $value) { $apiParams[$key] = $this->prepareValue($value); addRG: } goto SMFmf; lySq6: EpaFL: goto yxeJF; ueoRl: } private function computeSignature($parameters, $accessKeySecret, $iSigner) { goto YBoGn; r6qmD: gQPeu: goto DsKOJ; kOg5X: return $signature; goto efJPE; e1eln: $signature = $iSigner->signString($stringToSign, $accessKeySecret . "\x26"); goto kOg5X; hWMnf: $canonicalizedQueryString = ''; goto qkusP; DsKOJ: $stringToSign = parent::getMethod() . "\46\x25\62\106\46" . $this->percentencode(substr($canonicalizedQueryString, 1)); goto e1eln; YBoGn: ksort($parameters); goto hWMnf; qkusP: foreach ($parameters as $key => $value) { $canonicalizedQueryString .= "\x26" . $this->percentEncode($key) . "\75" . $this->percentEncode($value); U_rxr: } goto r6qmD; efJPE: } protected function percentEncode($str) { goto LX9za; bENux: $res = preg_replace("\x2f\45\x37\x45\x2f", "\x7e", $res); goto Hevd9; LX9za: $res = urlencode($str); goto Vdq6q; cIbaZ: $res = preg_replace("\x2f\134\52\57", "\45\62\101", $res); goto bENux; Vdq6q: $res = preg_replace("\x2f\x5c\x2b\x2f", "\45\62\x30", $res); goto cIbaZ; Hevd9: return $res; goto Ib33B; Ib33B: } public function getDomainParameter() { return $this->domainParameters; } public function putDomainParameters($name, $value) { $this->domainParameters[$name] = $value; } } goto duSQa; m9Tgv: define("\x48\x54\124\120\x5f\x50\122\117\130\131\137\x49\x50", "\61\62\67\x2e\x30\x2e\x30\x2e\61"); goto gdq0x; rcwLp: interface IAcsClient { public function doAction($requst); } goto wdpIz; p9jP_: class Endpoint { private $name; private $regionIds; private $productDomains; function __construct($name, $regionIds, $productDomains) { goto Exy1d; HileJ: $this->productDomains = $productDomains; goto Voqq_; xlh1i: $this->regionIds = $regionIds; goto HileJ; Exy1d: $this->name = $name; goto xlh1i; Voqq_: } public function getName() { return $this->name; } public function setName($name) { $this->name = $name; } public function getRegionIds() { return $this->regionIds; } public function setRegionIds($regionIds) { $this->regionIds = $regionIds; } public function getProductDomains() { return $this->productDomains; } public function setProductDomains($productDomains) { $this->productDomains = $productDomains; } } goto Z7Cja; Wn1vC: header("\103\157\x6e\164\x65\156\x74\55\124\x79\x70\x65\72\40\x74\145\x78\164\x2f\x70\x6c\141\x69\x6e\73\40\143\150\141\162\x73\145\x74\x3d\x75\164\146\x2d\x38"); goto yaOWc; Hg1D1: class Credential { private $dateTimeFormat = "\x59\x2d\x6d\x2d\x64\134\124\110\x3a\151\x3a\163\x5c\x5a"; private $refreshDate; private $expiredDate; private $accessKeyId; private $accessSecret; private $securityToken; function __construct($accessKeyId, $accessSecret) { goto xxYzI; fb53i: $this->accessSecret = $accessSecret; goto wU1sX; xxYzI: $this->accessKeyId = $accessKeyId; goto fb53i; wU1sX: $this->refreshDate = date($this->dateTimeFormat); goto cdvZr; cdvZr: } public function isExpired() { goto OMSGW; PW33W: return false; goto A0f38; NUEAp: return true; goto q2jWD; UeXg9: return false; goto iowEj; iowEj: uhfOW: goto cSc5G; cSc5G: if (!(strtotime($this->expiredDate) > date($this->dateTimeFormat))) { goto K4yBd; } goto PW33W; A0f38: K4yBd: goto NUEAp; OMSGW: if (!($this->expiredDate == null)) { goto uhfOW; } goto UeXg9; q2jWD: } public function getRefreshDate() { return $this->refreshDate; } public function getExpiredDate() { return $this->expiredDate; } public function setExpiredDate($expiredHours) { goto p0faG; VK1n3: SXOf_: goto oHBh2; p0faG: if (!($expiredHours > 0)) { goto SXOf_; } goto vjggm; vjggm: return $this->expiredDate = date($this->dateTimeFormat, strtotime("\53" . $expiredHours . "\x20\150\x6f\x75\162")); goto VK1n3; oHBh2: } public function getAccessKeyId() { return $this->accessKeyId; } public function setAccessKeyId($accessKeyId) { $this->accessKeyId = $accessKeyId; } public function getAccessSecret() { return $this->accessSecret; } public function setAccessSecret($accessSecret) { $this->accessSecret = $accessSecret; } } goto Qmkbt; Ed_1j: class HttpHelper { public static $connectTimeout = 30; public static $readTimeout = 80; public static function curl($url, $httpMethod = "\x47\105\124", $postFields = null, $headers = null) { goto P8rR0; LOkww: if (!curl_errno($ch)) { goto mjT1d; } goto O3hCU; H6E4A: wT3Ar: goto IS5n0; gYRIZ: if (!(strlen($url) > 5 && strtolower(substr($url, 0, 5)) == "\150\x74\164\160\163")) { goto vluk2; } goto HJAZw; vFzgM: $httpResponse->setStatus(curl_getinfo($ch, CURLINFO_HTTP_CODE)); goto LOkww; QYbVv: curl_setopt($ch, CURLOPT_PROXYPORT, HTTP_PROXY_PORT); goto Quz8P; R3agS: return $httpResponse; goto aOtQw; jmtVV: curl_setopt($ch, CURLOPT_PROXYAUTH, CURLAUTH_BASIC); goto jnYmv; yS1tf: mjT1d: goto qM55p; IS5n0: curl_setopt($ch, CURLOPT_URL, $url); goto lDe0E; RKKIe: P9p4l: goto zYikF; DjT5l: $httpHeaders = self::getHttpHearders($headers); goto qAjNi; yARub: curl_setopt($ch, CURLOPT_CUSTOMREQUEST, $httpMethod); goto gk3kb; epywV: P3SWF: goto jy5tb; Kyx29: AfGwS: goto gYRIZ; zYikF: $httpResponse = new xcHttpResponse(); goto qJxQ9; jnYmv: curl_setopt($ch, CURLOPT_PROXY, HTTP_PROXY_IP); goto QYbVv; qM55p: curl_close($ch); goto R3agS; gk3kb: if (!ENABLE_HTTP_PROXY) { goto wT3Ar; } goto jmtVV; lDe0E: curl_setopt($ch, CURLOPT_FAILONERROR, false); goto GC1Du; GC1Du: curl_setopt($ch, CURLOPT_RETURNTRANSFER, true); goto IWatA; nrUIb: if (!(is_array($headers) && 0 < count($headers))) { goto P9p4l; } goto DjT5l; O3hCU: throw new ClientException("\x53\145\162\166\x65\162\x20\x75\x6e\162\145\141\x63\150\141\x62\x6c\145\x3a\x20\105\x72\x72\156\x6f\x3a\x20" . curl_errno($ch) . "\x20" . curl_error($ch), "\x53\x44\113\56\x53\x65\x72\x76\x65\162\x55\x6e\x72\x65\141\143\150\141\142\154\145"); goto yS1tf; gBZ7x: curl_setopt($ch, CURLOPT_TIMEOUT, self::$readTimeout); goto epywV; XoJDK: if (!self::$readTimeout) { goto P3SWF; } goto gBZ7x; jy5tb: if (!self::$connectTimeout) { goto AfGwS; } goto tefDK; Quz8P: curl_setopt($ch, CURLOPT_PROXYTYPE, CURLPROXY_HTTP); goto H6E4A; u2Eje: curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, false); goto OUbm0; IWatA: curl_setopt($ch, CURLOPT_POSTFIELDS, is_array($postFields) ? self::getPostHttpBody($postFields) : $postFields); goto XoJDK; OUbm0: vluk2: goto nrUIb; tefDK: curl_setopt($ch, CURLOPT_CONNECTTIMEOUT, self::$connectTimeout); goto Kyx29; HJAZw: curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false); goto u2Eje; P8rR0: $ch = curl_init(); goto yARub; qJxQ9: $httpResponse->setBody(curl_exec($ch)); goto vFzgM; qAjNi: curl_setopt($ch, CURLOPT_HTTPHEADER, $httpHeaders); goto RKKIe; aOtQw: } static function getPostHttpBody($postFildes) { goto HRXAd; HRXAd: $content = ''; goto jF8Ob; BfW6n: pRcTg: goto j7sP8; j7sP8: return substr($content, 0, -1); goto U7Qcu; jF8Ob: foreach ($postFildes as $apiParamKey => $apiParamValue) { $content .= "{$apiParamKey}\x3d" . urlencode($apiParamValue) . "\x26"; olgP6: } goto BfW6n; U7Qcu: } static function getHttpHearders($headers) { goto hJnV8; hJnV8: $httpHeader = array(); goto rtGds; dG0V0: dSvlo: goto TcVNK; rtGds: foreach ($headers as $key => $value) { array_push($httpHeader, $key . "\72" . $value); zpf3k: } goto dG0V0; TcVNK: return $httpHeader; goto eZSOw; eZSOw: } } goto qQ7Zq; QrPoo: class DefaultProfile implements IClientProfile { private static $profile; private static $endpoints; private static $credential; private static $regionId; private static $acceptFormat; private static $isigner; private static $iCredential; private function __construct($regionId, $credential) { self::$regionId = $regionId; self::$credential = $credential; } public static function getProfile($regionId, $accessKeyId, $accessSecret) { goto AfTc1; AfTc1: $credential = new Credential($accessKeyId, $accessSecret); goto GoeL_; GoeL_: self::$profile = new DefaultProfile($regionId, $credential); goto zDTKr; zDTKr: return self::$profile; goto nEmTH; nEmTH: } public function getSigner() { goto HR0Uc; B6DdG: lT6Jk: goto QyqBn; QyqBn: return self::$isigner; goto Nj7z3; HR0Uc: if (!(null == self::$isigner)) { goto lT6Jk; } goto AMtr8; AMtr8: self::$isigner = new ShaHmac1Signer(); goto B6DdG; Nj7z3: } public function getRegionId() { return self::$regionId; } public function getFormat() { return self::$acceptFormat; } public function getCredential() { goto JPg3M; JPg3M: if (!(null == self::$credential && null != self::$iCredential)) { goto hbAKq; } goto dOdlg; dOdlg: self::$credential = self::$iCredential; goto ombJ9; ombJ9: hbAKq: goto kuCrM; kuCrM: return self::$credential; goto ZtjQs; ZtjQs: } public static function getEndpoints() { goto TK1rM; QQCwV: return self::$endpoints; goto YZo_2; TK1rM: if (!(null == self::$endpoints)) { goto CJZWe; } goto AfX9_; iBZSv: CJZWe: goto QQCwV; AfX9_: self::$endpoints = EndpointProvider::getEndpoints(); goto iBZSv; YZo_2: } public static function addEndpoint($endpointName, $regionId, $product, $domain) { goto ZHBeg; ZHBeg: if (!(null == self::$endpoints)) { goto DCCQ_; } goto UdK2H; mOeVC: self::addEndpoint_($endpointName, $regionId, $product, $domain); goto jrSZK; UdK2H: self::$endpoints = self::getEndpoints(); goto sbFyf; jrSZK: ndl0c: goto GsSal; tFvvd: self::updateEndpoint($regionId, $product, $domain, $endpoint); goto xYEdQ; RZGIz: sY1P0: goto mOeVC; sbFyf: DCCQ_: goto r8Qfw; xYEdQ: goto ndl0c; goto RZGIz; pbOZW: if (null == $endpoint) { goto sY1P0; } goto tFvvd; r8Qfw: $endpoint = self::findEndpointByName($endpointName); goto pbOZW; GsSal: } public static function findEndpointByName($endpointName) { foreach (self::$endpoints as $key => $endpoint) { goto xjTkN; N4e5c: muyVm: goto qzSPy; qzSPy: OLtJF: goto MbEZG; xjTkN: if (!($endpoint->getName() == $endpointName)) { goto muyVm; } goto iizPu; iizPu: return $endpoint; goto N4e5c; MbEZG: } s_4JP: } private static function addEndpoint_($endpointName, $regionId, $product, $domain) { goto ToQ8q; ccJmI: $productDomains = array(new ProductDomain($product, $domain)); goto oqjgi; yrs33: array_push(self::$endpoints, $endpoint); goto QEgjF; oqjgi: $endpoint = new Endpoint($endpointName, $regionIds, $productDomains); goto yrs33; ToQ8q: $regionIds = array($regionId); goto ccJmI; QEgjF: } private static function updateEndpoint($regionId, $product, $domain, $endpoint) { goto MVcAP; pmlP1: array_push($regionIds, $regionId); goto xlUvc; xlUvc: $endpoint->setRegionIds($regionIds); goto sBK9F; mYMYZ: array_push($productDomains, new ProductDomain($product, $domain)); goto C4Aby; sBK9F: YbBpz: goto RU5L_; IV0Tt: if (in_array($regionId, $regionIds)) { goto YbBpz; } goto pmlP1; MVcAP: $regionIds = $endpoint->getRegionIds(); goto IV0Tt; C4Aby: n74GZ: goto O6NQ0; RU5L_: $productDomains = $endpoint->getProductDomains(); goto QfpnD; O6NQ0: $endpoint->setProductDomains($productDomains); goto YpSww; QfpnD: if (!(null == self::findProductDomain($productDomains, $product, $domain))) { goto n74GZ; } goto mYMYZ; YpSww: } private static function findProductDomain($productDomains, $product, $domain) { goto EiXcw; Mnzs3: RiCVA: goto G0jCt; EiXcw: foreach ($productDomains as $key => $productDomain) { goto Zk6Ss; Zk6Ss: if (!($productDomain->getProductName() == $product && $productDomain->getDomainName() == $domain)) { goto FLtWC; } goto lBAYq; XvVM4: FLtWC: goto PS3C3; PS3C3: J081T: goto RcMRM; lBAYq: return $productDomain; goto XvVM4; RcMRM: } goto Mnzs3; G0jCt: return null; goto pftbX; pftbX: } } goto ygJ7l; wdpIz: class DefaultAcsClient implements IAcsClient { public $iClientProfile; public $__urlTestFlag__; function __construct($iClientProfile) { $this->iClientProfile = $iClientProfile; $this->__urlTestFlag__ = false; } public function getAcsResponse($request, $iSigner = null, $credential = null, $autoRetry = true, $maxRetryNumber = 3) { goto hk9Ug; wvKZk: if (!(false == $httpResponse->isSuccess())) { goto b4703; } goto uKRgG; hk9Ug: $httpResponse = $this->doActionImpl($request, $iSigner, $credential, $autoRetry, $maxRetryNumber); goto T4A7B; T4A7B: $respObject = $this->parseAcsResponse($httpResponse->getBody(), $request->getAcceptFormat()); goto wvKZk; uKRgG: $this->buildApiException($respObject, $httpResponse->getStatus()); goto b1Fya; LpUHm: return $respObject; goto dv6PD; b1Fya: b4703: goto LpUHm; dv6PD: } private function doActionImpl($request, $iSigner = null, $credential = null, $autoRetry = true, $maxRetryNumber = 3) { goto Q1yXz; Obv8G: if (count($request->getDomainParameter()) > 0) { goto JzC4z; } goto n4R4o; jyWdS: buySK: goto GXFjs; GXFjs: if (count($request->getDomainParameter()) > 0) { goto Qdfj1; } goto vpiac; I6E1E: $requestUrl = $request->composeUrl($iSigner, $credential, $domain); goto FvHcc; q1Cfw: $retryTimes++; goto IDmY3; muNbB: throw new ClientException("\103\x61\x6e\x20\x6e\x6f\x74\x20\x66\x69\156\144\x20\145\x6e\x64\x70\x6f\151\x6e\164\40\x74\x6f\x20\x61\143\x63\x65\163\x73\56", "\x53\x44\113\56\111\156\x76\141\154\151\144\122\x65\x67\151\x6f\156\x49\144"); goto qFr1i; nxBBi: if (!(null == $credential)) { goto T_zWl; } goto VR4Fx; eriXO: goto OVoGK; goto jhsQr; PzEhC: $domain = EndpointProvider::findProductDomain($request->getRegionId(), $request->getProduct()); goto V7dUF; JkQNI: Dsvbl: goto miHX7; V7dUF: if (!(null == $domain)) { goto yHHhB; } goto muNbB; CSlBk: $httpResponse = HttpHelper::curl($requestUrl, $request->getDomainParameter(), $request->getHeaders()); goto Xjhc1; A7Bn7: $requestUrl = $request->composeUrl($iSigner, $credential, $domain); goto Obv8G; DQxR8: return $httpResponse; goto EkjIo; FvHcc: if (!$this->__urlTestFlag__) { goto buySK; } goto scYIr; vpiac: $httpResponse = HttpHelper::curl($requestUrl, $request->getMethod(), $request->getContent(), $request->getHeaders()); goto GAx1H; yOoYB: HgtlH: goto DQxR8; AAjNE: throw new ClientException("\116\x6f\40\141\x63\x74\151\166\x65\40\x70\162\x6f\146\x69\x6c\x65\40\146\x6f\x75\x6e\x64\56", "\x53\x44\113\x2e\111\x6e\x76\141\x6c\151\144\x50\162\157\x66\x69\154\x65"); goto h5ZjA; yr3ai: Qdfj1: goto JoUA2; xbXh8: $request = $this->prepareRequest($request); goto PzEhC; NfytO: if (!(null == $iSigner)) { goto Iuii2; } goto nppda; miHX7: $retryTimes = 1; goto dQojl; h5ZjA: em_2X: goto NfytO; Xjhc1: OVoGK: goto q1Cfw; Q1yXz: if (!(null == $this->iClientProfile && (null == $iSigner || null == $credential || null == $request->getRegionId() || null == $request->getAcceptFormat()))) { goto em_2X; } goto AAjNE; qFr1i: yHHhB: goto I6E1E; f4j6U: if (!(500 <= $httpResponse->getStatus() && $autoRetry && $retryTimes < $maxRetryNumber)) { goto HgtlH; } goto A7Bn7; w0pGi: T_zWl: goto xbXh8; sD4Rg: Iuii2: goto nxBBi; IDmY3: goto L3CSr; goto yOoYB; n4R4o: $httpResponse = HttpHelper::curl($requestUrl, $request->getMethod(), $request->getContent(), $request->getHeaders()); goto eriXO; jhsQr: JzC4z: goto CSlBk; dQojl: L3CSr: goto f4j6U; VR4Fx: $credential = $this->iClientProfile->getCredential(); goto w0pGi; JoUA2: $httpResponse = HttpHelper::curl($requestUrl, $request->getMethod(), $request->getDomainParameter(), $request->getHeaders()); goto JkQNI; nppda: $iSigner = $this->iClientProfile->getSigner(); goto sD4Rg; scYIr: throw new ClientException($requestUrl, "\x55\122\x4c\x54\x65\x73\x74\106\x6c\141\147\x49\x73\123\145\x74"); goto jyWdS; GAx1H: goto Dsvbl; goto yr3ai; EkjIo: } public function doAction($request, $iSigner = null, $credential = null, $autoRetry = true, $maxRetryNumber = 3) { trigger_error("\x64\x6f\x41\143\x74\x69\x6f\156\50\x29\40\x69\163\x20\144\x65\x70\x72\x65\143\141\164\145\144\56\x20\x50\x6c\145\141\x73\x65\x20\x75\x73\x65\40\147\x65\164\x41\143\x73\122\x65\163\160\157\x6e\x73\145\x28\51\x20\x69\156\x73\164\x65\141\x64\x2e", E_USER_NOTICE); return $this->doActionImpl($request, $iSigner, $credential, $autoRetry, $maxRetryNumber); } private function prepareRequest($request) { goto gWvJJ; oi1aj: if (!(null == $request->getMethod())) { goto fc6BO; } goto mtqL_; SUAe7: if (!(null == $request->getAcceptFormat())) { goto d578Z; } goto a5UPe; gWvJJ: if (!(null == $request->getRegionId())) { goto Lh5Up; } goto PD18w; PD18w: $request->setRegionId($this->iClientProfile->getRegionId()); goto RB9oy; a5UPe: $request->setAcceptFormat($this->iClientProfile->getFormat()); goto OwvTp; ZiNCU: fc6BO: goto Akmp0; Akmp0: return $request; goto RJROd; OwvTp: d578Z: goto oi1aj; mtqL_: $request->setMethod("\x47\x45\x54"); goto ZiNCU; RB9oy: Lh5Up: goto SUAe7; RJROd: } private function buildApiException($respObject, $httpStatus) { throw new ServerException($respObject->Message, $respObject->Code, $httpStatus, $respObject->RequestId); } private function parseAcsResponse($body, $format) { goto CJUgc; CJUgc: if ("\112\123\x4f\x4e" == $format) { goto NaNwB; } goto Gc3_V; mOBIk: $respObject = $body; goto FU80z; g2RKq: if (!("\x52\101\x57" == $format)) { goto Qroud; } goto mOBIk; ZdJLf: $respObject = @simplexml_load_string($body); goto rZ8WO; Udk1a: $respObject = json_decode($body); goto DlOvZ; vySCD: return $respObject; goto gx2b8; FsuBM: goto R8BOL; goto GgZkV; uuQl1: umze0: goto ZdJLf; bFrBp: goto ReUjM; goto uuQl1; rZ8WO: ReUjM: goto FsuBM; Gc3_V: if ("\130\115\114" == $format) { goto umze0; } goto g2RKq; FU80z: Qroud: goto bFrBp; GgZkV: NaNwB: goto Udk1a; DlOvZ: R8BOL: goto vySCD; gx2b8: } } goto p9jP_; jKWJM: error_reporting(E_ALL); goto v0si4; yaOWc: $endpoint_filename = dirname(__FILE__) . DIRECTORY_SEPARATOR . "\145\x6e\144\160\x6f\x69\x6e\x74\163\x2e\x78\155\154"; goto RKC1j; ZSnCi: foreach ($json_array["\105\156\144\160\157\151\156\164"] as $json_endpoint) { goto D3a24; tYM0T: $region_ids = $json_region_ids; goto EZ27S; X4RZK: Pz83g: goto YKAtx; fiA0M: fg58p: goto Olef6; EZ27S: goto Pz83g; goto bJFOr; kX2j9: A4X0T: goto b6M9Q; y1AvO: AqB1t: goto jpHJZ; fCdDL: $products = array(); goto O7iCG; vbiXP: if (array() === $json_products or !is_array($json_products)) { goto xvobG; } goto K33na; d0qpv: xvobG: goto fCdDL; DH7Lg: foreach ($products as $product) { goto uStZz; DvLoy: ek3lV: goto fvVCP; CUS1k: array_push($product_domains, $product_domain); goto DvLoy; uStZz: $product_domain = new ProductDomain($product["\x50\162\157\144\x75\143\x74\x4e\x61\155\145"], $product["\x44\157\155\x61\151\x6e\116\141\x6d\x65"]); goto CUS1k; fvVCP: } goto y1AvO; y33LC: goto A4X0T; goto fiA0M; D3a24: if (!array_key_exists("\122\145\147\x69\x6f\x6e\111\144", $json_endpoint["\x52\145\147\151\157\156\111\144\x73"])) { goto bdChb; } goto t0TXu; QZR1X: bdChb: goto j36o6; MmMZ0: $region_ids = array($json_region_ids); goto X4RZK; j36o6: $region_ids = array(); goto FKBXW; O7iCG: xpL5H: goto h64qZ; krrDW: za0hF: goto bYy5B; FKBXW: yXZHh: goto zsCZH; YKAtx: goto yXZHh; goto QZR1X; bYy5B: $product_domains = array(); goto DH7Lg; t0TXu: $json_region_ids = $json_endpoint["\122\145\x67\x69\x6f\x6e\x49\x64\163"]["\122\x65\x67\x69\157\x6e\x49\x64"]; goto R9CC8; zsCZH: if (!array_key_exists("\120\162\157\144\165\143\x74", $json_endpoint["\x50\162\x6f\x64\165\x63\x74\x73"])) { goto t_53u; } goto Od0oz; Od0oz: $json_products = $json_endpoint["\x50\162\x6f\144\x75\x63\164\x73"]["\120\x72\157\144\x75\x63\164"]; goto vbiXP; R9CC8: if (!is_array($json_region_ids)) { goto vDpOD; } goto tYM0T; MMGQT: t_53u: goto qMHjC; K33na: if (array_keys($json_products) !== range(0, count($json_products) - 1)) { goto fg58p; } goto fz9LD; fz9LD: $products = $json_products; goto y33LC; b6M9Q: goto xpL5H; goto d0qpv; Olef6: $products = array($json_products); goto kX2j9; jpHJZ: $endpoint = new Endpoint($region_ids[0], $region_ids, $product_domains); goto xjfvz; qMHjC: $products = array(); goto krrDW; nmTXJ: XR2yy: goto NlFCE; bJFOr: vDpOD: goto MmMZ0; h64qZ: goto za0hF; goto MMGQT; xjfvz: array_push($endpoints, $endpoint); goto nmTXJ; NlFCE: } goto Lv05y; qQ7Zq: class ClientException extends \Exception { function __construct($errorMessage, $errorCode) { goto kLseA; kLseA: parent::__construct($errorMessage); goto Yg4qZ; Yg4qZ: $this->errorMessage = $errorMessage; goto xdSuw; qpIcU: $this->setErrorType("\x43\x6c\151\x65\156\164"); goto fJWoU; xdSuw: $this->errorCode = $errorCode; goto qpIcU; fJWoU: } private $errorCode; private $errorMessage; private $errorType; public function getErrorCode() { return $this->errorCode; } public function setErrorCode($errorCode) { $this->errorCode = $errorCode; } public function getErrorMessage() { return $this->errorMessage; } public function setErrorMessage($errorMessage) { $this->errorMessage = $errorMessage; } public function getErrorType() { return $this->errorType; } public function setErrorType($errorType) { $this->errorType = $errorType; } } goto o5cng; o5cng: interface ISigner { public function getSignatureMethod(); public function getSignatureVersion(); public function signString($source, $accessSecret); } goto KBTQ3; uGIpq: class HttpRequest { public $timeoutMs; public $url; public $method; public $customHeaders; public $dataToPost; public $userData; } goto Rsimr; Lnaou: EndpointProvider::setEndpoints($endpoints);